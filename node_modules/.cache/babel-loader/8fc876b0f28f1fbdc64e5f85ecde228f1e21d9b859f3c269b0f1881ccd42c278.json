{"ast":null,"code":"var _jsxFileName = \"/home/anagha/fraction-add-2/src/Frames/Frame1.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Fraction from \"../Components/Fraction\";\nimport useTypewriter from \"../Hooks/useTypewritter\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Frame1({\n  num1,\n  denom1,\n  num2,\n  denom2,\n  lcm\n}) {\n  _s();\n  const [step, setStep] = useState();\n  const text1A = [`Both ${num1}/${denom1} and ${num2}/${denom2} have different denominators.`, ` So we need to find the common denominator.`, ` For that, we need to find the least common multiple(LCM) of both denominators.`];\n  const text1B = [`Both ${num1}/${denom1} and ${num2}/${denom2} have the same denominator. `, `So we can easily add them.`];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [num1, \"/\", denom1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Fraction, {\n        num: num1,\n        denom: denom1,\n        color: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"outer-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [num2, \"/\", denom2]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Fraction, {\n        num: num2,\n        denom: denom2,\n        color: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"bad-script fs-2 text-left\",\n      children: text1A[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true)\n  // </div>\n  ;\n}\n_s(Frame1, \"MO8PxzJGDVeaYX+UUUdmWsJjxPc=\");\n_c = Frame1;\nexport default Frame1;\nvar _c;\n$RefreshReg$(_c, \"Frame1\");","map":{"version":3,"names":["React","useState","Fraction","useTypewriter","jsxDEV","_jsxDEV","Fragment","_Fragment","Frame1","num1","denom1","num2","denom2","lcm","_s","step","setStep","text1A","text1B","children","className","fileName","_jsxFileName","lineNumber","columnNumber","num","denom","color","_c","$RefreshReg$"],"sources":["/home/anagha/fraction-add-2/src/Frames/Frame1.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Fraction from \"../Components/Fraction\";\nimport useTypewriter from \"../Hooks/useTypewritter\";\n\nfunction Frame1({ num1, denom1, num2, denom2,lcm }) {\n  const [step,setStep]=useState()\n  const text1A=[`Both ${num1}/${denom1} and ${num2}/${denom2} have different denominators.`,\n  ` So we need to find the common denominator.`,\n  ` For that, we need to find the least common multiple(LCM) of both denominators.`]\n  const text1B=[`Both ${num1}/${denom1} and ${num2}/${denom2} have the same denominator. `,\n  `So we can easily add them.`]\n  return (\n    <>\n      {/* <div className=\"d-flex flex-column justify-content-center align-items-center\"> */}\n        <div className=\"outer-grid\">\n          <div>\n            <h1>\n              {num1}/{denom1}\n            </h1>\n          </div>\n          <Fraction\n            num={num1}\n            denom={denom1}\n            color={\"blue\"}\n          />\n        </div>\n        <h1>+</h1>\n        <div className=\"outer-grid\">\n          <div>\n            <h1>\n              {num2}/\n              {denom2}\n            </h1>\n          </div>\n          <Fraction\n            num={num2}\n            denom={denom2}\n            color={\"yellow\"}\n          />\n        </div>\n\n        <p className=\"bad-script fs-2 text-left\">{text1A[0]}</p>   \n      </>\n    // </div>\n  );\n}\n\nexport default Frame1;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,aAAa,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,SAASC,MAAMA,CAAC;EAAEC,IAAI;EAAEC,MAAM;EAAEC,IAAI;EAAEC,MAAM;EAACC;AAAI,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACf,QAAQ,CAAC,CAAC;EAC/B,MAAMgB,MAAM,GAAC,CAAE,QAAOR,IAAK,IAAGC,MAAO,QAAOC,IAAK,IAAGC,MAAO,+BAA8B,EACxF,6CAA4C,EAC5C,iFAAgF,CAAC;EAClF,MAAMM,MAAM,GAAC,CAAE,QAAOT,IAAK,IAAGC,MAAO,QAAOC,IAAK,IAAGC,MAAO,8BAA6B,EACvF,4BAA2B,CAAC;EAC7B,oBACEP,OAAA,CAAAE,SAAA;IAAAY,QAAA,gBAEId,OAAA;MAAKe,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACzBd,OAAA;QAAAc,QAAA,eACEd,OAAA;UAAAc,QAAA,GACGV,IAAI,EAAC,GAAC,EAACC,MAAM;QAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACZ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACNnB,OAAA,CAACH,QAAQ;QACPuB,GAAG,EAAEhB,IAAK;QACViB,KAAK,EAAEhB,MAAO;QACdiB,KAAK,EAAE;MAAO;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNnB,OAAA;MAAAc,QAAA,EAAI;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACVnB,OAAA;MAAKe,SAAS,EAAC,YAAY;MAAAD,QAAA,gBACzBd,OAAA;QAAAc,QAAA,eACEd,OAAA;UAAAc,QAAA,GACGR,IAAI,EAAC,GACN,EAACC,MAAM;QAAA;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACNnB,OAAA,CAACH,QAAQ;QACPuB,GAAG,EAAEd,IAAK;QACVe,KAAK,EAAEd,MAAO;QACde,KAAK,EAAE;MAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnB,OAAA;MAAGe,SAAS,EAAC,2BAA2B;MAAAD,QAAA,EAAEF,MAAM,CAAC,CAAC;IAAC;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eACxD;EACJ;EAAA;AAEJ;AAACV,EAAA,CAzCQN,MAAM;AAAAoB,EAAA,GAANpB,MAAM;AA2Cf,eAAeA,MAAM;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}