{"ast":null,"code":"var _jsxFileName = \"/home/anagha/fraction-add-2/src/Components/FractionSum.js\";\nimport React from \"react\";\nimport \"./Fraction.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction FractionSum({\n  num1,\n  num2,\n  denom,\n  color1,\n  color2\n}) {\n  const style0 = {\n    gridTemplateColumns: `repeat(${denom}, 1fr)`\n  };\n  const style1 = {\n    backgroundColor: color1\n  };\n  const style2 = {\n    backgroundColor: color2\n  };\n  const rows = Array.from({\n    length: Math.floor((num1 + num2) / denom) + 1\n  }, (_, rIndex) => Array.from({\n    length: denom\n  }, (_, cIndex) => {\n    if (denom * rIndex + cIndex < num1) {\n      return 1;\n    } else if (denom * rIndex + cIndex < num1 + num2) {\n      return 2;\n    } else {\n      return 0;\n    }\n  }));\n  const elements = Array.from({\n    length: denom\n  }, (_, index) => {\n    if (index < num1 % denom) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !num1 || !num2 || !denom ? console.error(\"'num1','num2' and 'denom' are required for the component 'Fraction'\") : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded mx-auto my-1 grid-container\",\n        style: style0,\n        children: row.map((j, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: j == 1 ? style1 : j == 2 ? style2 : {},\n          children: split && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, `item-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this))\n      }, `grid-${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = FractionSum;\nexport default FractionSum;\nvar _c;\n$RefreshReg$(_c, \"FractionSum\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","FractionSum","num1","num2","denom","color1","color2","style0","gridTemplateColumns","style1","backgroundColor","style2","rows","Array","from","length","Math","floor","_","rIndex","cIndex","elements","index","children","console","error","map","row","className","style","j","split","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/anagha/fraction-add-2/src/Components/FractionSum.js"],"sourcesContent":["import React from \"react\";\nimport \"./Fraction.css\";\nfunction FractionSum({ num1,num2, denom, color1,color2 }) {\n  const style0 = {\n    gridTemplateColumns: `repeat(${denom}, 1fr)`,\n  };\n\n  const style1 = {\n    backgroundColor: color1,\n  };\n\n  const style2 = {\n    backgroundColor: color2,\n  };\n  const rows = Array.from(\n    { length: Math.floor((num1+num2) / denom)+1 },\n    (_, rIndex) => Array.from({ length: denom }, (_, cIndex) => {\n      if (denom*rIndex+cIndex < num1) {\n        return 1;\n      } else if(denom*rIndex+cIndex < num1+num2) {\n        return 2;\n      }\n      else{\n        return 0\n      }\n    })\n  );\n  const elements = Array.from({ length: denom }, (_, index) => {\n    if (index < num1 % denom) {\n      return true;\n    } else {\n      return false;\n    }\n  });\n\n  return (\n    <>\n      {!num1 ||!num2 || !denom ? (\n        console.error(\n          \"'num1','num2' and 'denom' are required for the component 'Fraction'\"\n        )\n      ) : (\n        <div>\n          {rows.map((row, index) => (\n            <div\n              key={`grid-${index}`}\n              className=\"rounded mx-auto my-1 grid-container\"\n              style={style0}\n            >\n              {row.map((j, index) => (\n                <div\n                  key={`item-${index}`}\n                  style={j==1?style1:j==2?style2:{}}\n                >\n                  {split && <div></div>}\n                </div>\n              ))}\n            </div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default FractionSum;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACxB,SAASC,WAAWA,CAAC;EAAEC,IAAI;EAACC,IAAI;EAAEC,KAAK;EAAEC,MAAM;EAACC;AAAO,CAAC,EAAE;EACxD,MAAMC,MAAM,GAAG;IACbC,mBAAmB,EAAG,UAASJ,KAAM;EACvC,CAAC;EAED,MAAMK,MAAM,GAAG;IACbC,eAAe,EAAEL;EACnB,CAAC;EAED,MAAMM,MAAM,GAAG;IACbD,eAAe,EAAEJ;EACnB,CAAC;EACD,MAAMM,IAAI,GAAGC,KAAK,CAACC,IAAI,CACrB;IAAEC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAAC,CAACf,IAAI,GAACC,IAAI,IAAIC,KAAK,CAAC,GAAC;EAAE,CAAC,EAC7C,CAACc,CAAC,EAAEC,MAAM,KAAKN,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEX;EAAM,CAAC,EAAE,CAACc,CAAC,EAAEE,MAAM,KAAK;IAC1D,IAAIhB,KAAK,GAACe,MAAM,GAACC,MAAM,GAAGlB,IAAI,EAAE;MAC9B,OAAO,CAAC;IACV,CAAC,MAAM,IAAGE,KAAK,GAACe,MAAM,GAACC,MAAM,GAAGlB,IAAI,GAACC,IAAI,EAAE;MACzC,OAAO,CAAC;IACV,CAAC,MACG;MACF,OAAO,CAAC;IACV;EACF,CAAC,CACH,CAAC;EACD,MAAMkB,QAAQ,GAAGR,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEX;EAAM,CAAC,EAAE,CAACc,CAAC,EAAEI,KAAK,KAAK;IAC3D,IAAIA,KAAK,GAAGpB,IAAI,GAAGE,KAAK,EAAE;MACxB,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EAEF,oBACEN,OAAA,CAAAE,SAAA;IAAAuB,QAAA,EACG,CAACrB,IAAI,IAAG,CAACC,IAAI,IAAI,CAACC,KAAK,GACtBoB,OAAO,CAACC,KAAK,CACX,qEACF,CAAC,gBAED3B,OAAA;MAAAyB,QAAA,EACGX,IAAI,CAACc,GAAG,CAAC,CAACC,GAAG,EAAEL,KAAK,kBACnBxB,OAAA;QAEE8B,SAAS,EAAC,qCAAqC;QAC/CC,KAAK,EAAEtB,MAAO;QAAAgB,QAAA,EAEbI,GAAG,CAACD,GAAG,CAAC,CAACI,CAAC,EAAER,KAAK,kBAChBxB,OAAA;UAEE+B,KAAK,EAAEC,CAAC,IAAE,CAAC,GAACrB,MAAM,GAACqB,CAAC,IAAE,CAAC,GAACnB,MAAM,GAAC,CAAC,CAAE;UAAAY,QAAA,EAEjCQ,KAAK,iBAAIjC,OAAA;YAAAkC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAU;QAAC,GAHf,QAAOb,KAAM,EAAC;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIjB,CACN;MAAC,GAXI,QAAOb,KAAM,EAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAYjB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN,gBACD,CAAC;AAEP;AAACC,EAAA,GA7DQnC,WAAW;AA+DpB,eAAeA,WAAW;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}